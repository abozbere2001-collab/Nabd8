/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with public read access for some collections.
 *
 * Data Structure:
 * - /users/{userId}: User profile information. Only the user can read/write their own profile.
 * - /competitions/{competitionId}: Publicly readable competition data.
 * - /teams/{teamId}: Publicly readable team data.
 * - /matches/{matchId}: Publicly readable match data.
 * - /news/{newsId}: Publicly readable news articles.
 * - /admins/{adminId}: Admin user data. Only admins can read/write.
 * - /users/{userId}/favorites/data: User's favorite teams and competitions. Only the user can read/write their own favorites.
 * - /predictions/{fixtureId}: Matches pinned by admins for user prediction; publicly readable.
 * - /predictions/{fixtureId}/userPredictions/{userId}: Individual user predictions for a match. Only the user can read/write their own predictions.
 * - /leaderboard/{userId}: Aggregated prediction scores for each user. Publicly readable.
 *
 * Key Security Decisions:
 * - Public read access is granted to /competitions, /teams, /matches, /news, and /predictions.
 * - Users can only access their own data under the /users/{userId} collection.
 * - Predictions are stored under /predictions/{fixtureId}/userPredictions/{userId} and only accessible by the user making the prediction.
 * - Admin access is not currently enforced in this simplified ruleset, but the structure allows for it.
 *
 * Denormalization for Authorization:
 *  - The current rules do not require denormalization. If access control becomes more complex (e.g., shared access to predictions), consider denormalizing access control data (e.g., list of authorized user IDs) onto the relevant documents.
 *
 * Structural Segregation:
 * - The rules leverage subcollections (e.g., /users/{userId}/favorites/data) to segregate user-specific private data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile if request.auth.uid == 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can read/update/delete their profile if request.auth.uid == 'user123'.
     * @deny (create) - User with UID 'user456' cannot create a profile with ID 'user123'.
     * @deny (get, update, delete) - User with UID 'user456' cannot read/update/delete the profile with ID 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Allows anyone to read competition data. Write operations are disallowed.
     * @path /competitions/{competitionId}
     * @allow (get, list) - Any user can read the competition data.
     * @deny (create, update, delete) - No one can create, update, or delete competition data.
     * @principle Grants public read access while restricting write access.
     */
    match /competitions/{competitionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read team data. Write operations are disallowed.
     * @path /teams/{teamId}
     * @allow (get, list) - Any user can read the team data.
     * @deny (create, update, delete) - No one can create, update, or delete team data.
     * @principle Grants public read access while restricting write access.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read match data. Write operations are disallowed.
     * @path /matches/{matchId}
     * @allow (get, list) - Any user can read the match data.
     * @deny (create, update, delete) - No one can create, update, or delete match data.
     * @principle Grants public read access while restricting write access.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read news data. Write operations are disallowed.
     * @path /news/{newsId}
     * @allow (get, list) - Any user can read the news data.
     * @deny (create, update, delete) - No one can create, update, or delete news data.
     * @principle Grants public read access while restricting write access.
     */
    match /news/{newsId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Restricts access to admin user data.
     * @path /admins/{adminId}
     * @allow get, list, create, update, delete: if false;
     * @principle Grants no access to admin data for now.
     */
    match /admins/{adminId} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Allows a user to read and write their own favorites data.
     * @path /users/{userId}/favorites/data
     * @allow (create) - User with UID 'user123' can create their favorites data if request.auth.uid == 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can read/update/delete their favorites data if request.auth.uid == 'user123'.
     * @deny (create) - User with UID 'user456' cannot create favorites data with userId 'user123'.
     * @deny (get, update, delete) - User with UID 'user456' cannot read/update/delete favorites data with userId 'user123'.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/favorites/data {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Allows anyone to read the matches pinned for predictions. Write operations are disallowed.
     * @path /predictions/{fixtureId}
     * @allow (get, list) - Any user can read the data.
     * @deny (create, update, delete) - No one can create, update, or delete the data.
     * @principle Grants public read access while restricting write access.
     */
    match /predictions/{fixtureId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to read and write their own predictions for a specific match.
     * @path /predictions/{fixtureId}/userPredictions/{userId}
     * @allow (create) - User with UID 'user123' can create their prediction if request.auth.uid == 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can read/update/delete their prediction if request.auth.uid == 'user123'.
     * @deny (create) - User with UID 'user456' cannot create a prediction with userId 'user123'.
     * @deny (get, update, delete) - User with UID 'user456' cannot read/update/delete the prediction with userId 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /predictions/{fixtureId}/userPredictions/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows anyone to read leaderboard scores. Only users can write their own score.
     * @path /leaderboard/{userId}
     * @allow (get, list) - Any user can read the data.
     * @allow (create, update, delete) - User can manage their own score.
     * @principle Public read access, with per-user write control.
     */
    match /leaderboard/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get, list: if true;
      allow create, update, delete: if isOwner(userId);
    }
  }
}

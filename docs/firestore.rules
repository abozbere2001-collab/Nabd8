/**
 * @file Firestore Security Rules for Goal Stack application.
 *
 * @core_philosophy This ruleset implements a combination of ownership-based access control for user-specific data and role-based access control for admin-managed content. Public read access is granted to some collections (e.g., competitions, teams, matches, news).
 *
 * @data_structure
 * - `/users/{userId}`: Stores individual user profiles, accessible only by the user themselves.
 * - `/competitions/{competitionId}`: Stores competition data, publicly readable but admin-manageable.
 * - `/teams/{teamId}`: Stores team data, publicly readable but admin-manageable.
 * - `/matches/{matchId}`: Stores match data, publicly readable.
 * - `/news/{newsId}`: Stores news articles, publicly readable but admin-manageable.
 * - `/admins/{adminId}`:  Indicates admin status; existence of a document grants admin privileges.
 * - `/users/{userId}/favorites`: Stores user's favorite teams and competitions; accessible only by the user themselves.
 * - `/topCompetitions/{competitionId}`: Stores top competitions marked by admins. Publicly readable, but only admins can create/update/delete.
 * - `/topTeams/{teamId}`: Stores top teams marked by admins. Publicly readable, but only admins can create/update/delete.
 * - `/leagueCustomizations/{leagueId}`: Stores custom names for leagues set by admins. Only admins can create/update/delete.
 * - `/teamCustomizations/{teamId}`: Stores custom names for teams set by admins. Only admins can create/update/delete.
 * - `/playerCustomizations/{playerId}`: Stores custom names for players set by admins. Only admins can create/update/delete.
 * - `/matchCustomizations/{fixtureId}`: Stores custom status for matches set by admins. Only admins can create/update/delete.
 * - `/continentCustomizations/{continentId}`: Stores custom names for continents set by admins. Only admins can create/update/delete.
 * - `/countryCustomizations/{countryId}`: Stores custom names for countries set by admins. Only admins can create/update/delete.
 * - `/pinnedIraqiMatches/{matchId}`: Stores the details of a pinned Iraqi match, managed by an admin. Only admins can create/update/delete.
 *
 * @key_security_decisions
 * - User data is strictly private, accessible only to the authenticated user.
 * - Public data (competitions, teams, matches, news, predictions) is publicly readable but admin-managed where appropriate.
 * - Admin privileges are determined by the existence of a document in `/admins/{adminId}`.
 * - List operations are allowed only where explicitly permitted.
 *
 * @denormalization_for_authorization Admin status is determined by the presence of a document in `/admins/{adminId}`, avoiding the need to store admin roles within user documents or make complex queries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @principal Ensures that only authenticated users can access certain resources.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} - True if the user is the owner, false otherwise.
     * @principal Implements user-based access control, ensuring users can only access their own data.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
      * @description Checks if the authenticated user is an existing owner of the resource
      * @param {string} userId - The user ID to compare against the authenticated user's UID.
      * @returns {boolean} - True if the user is the owner and the resource exists, false otherwise.
      * @principal Prevents modification or deletion of non-existent resources.
      */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the requesting user is an admin.
     * @returns {boolean} True if the user is an admin, false otherwise.
     * @principal Enforces role-based access control, allowing only admins to perform certain actions.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile with matching userId in the document.
     * @allow (get, update, delete) Authenticated user with ID 'user123' reads/updates/deletes their profile.
     * @deny (create, get, update, delete) User with ID 'user456' tries to access profile of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for competitions.
     * @path /competitions/{competitionId}
     * @allow (get, list) Any user can read competition data.
     * @allow (create, update, delete) Only admins can manage competition data.
     * @deny (create, update, delete) Non-admin users cannot manage competition data.
     * @principle Public read access with admin-controlled writes.
     */
    match /competitions/{competitionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for teams.
     * @path /teams/{teamId}
     * @allow (get, list) Any user can read team data.
     * @allow (create, update, delete) Only admins can manage team data.
     * @deny (create, update, delete) Non-admin users cannot manage team data.
     * @principle Public read access with admin-controlled writes.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for matches.
     * @path /matches/{matchId}
     * @allow (get, list) Any user can read match data.
     * @deny (create, update, delete) No one can create, update, or delete match data.
     * @principle Public read access with no write access.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for news articles.
     * @path /news/{newsId}
     * @allow (get, list) Any user can read news articles.
     * @allow (create, update, delete) Only admins can manage news articles.
     * @deny (create, update, delete) Non-admin users cannot manage news articles.
     * @principle Public read access with admin-controlled writes.
     */
    match /news/{newsId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for admin user data.
     * @path /admins/{adminId}
     * @allow (create, update, delete) Only admins can manage other admin data.
     * @deny (get, list) Normal users can't read or list admins.
     * @principle Restricts access to admin data to only admin users.
     */
    match /admins/{adminId} {
      allow get, list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for user's favorite teams and competitions.
     * @path /users/{userId}/favorites
     * @allow (get, update, delete) Authenticated user with ID 'user123' reads/updates/deletes their favorites.
     * @deny (create, get, update, delete) User with ID 'user456' tries to access favorites of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/favorites {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
	
	/**
     * @description Rules for top competitions.
     * @path /topCompetitions/{competitionId}
     * @allow (get, list) Any user can read competition data.
     * @allow (create, update, delete) Only admins can manage competition data.
     * @deny (create, update, delete) Non-admin users cannot manage competition data.
     * @principle Public read access with admin-controlled writes.
     */
    match /topCompetitions/{competitionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for top teams.
     * @path /topTeams/{teamId}
     * @allow (get, list) Any user can read team data.
     * @allow (create, update, delete) Only admins can manage team data.
     * @deny (create, update, delete) Non-admin users cannot manage team data.
     * @principle Public read access with admin-controlled writes.
     */
    match /topTeams/{teamId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for league customizations.
     * @path /leagueCustomizations/{leagueId}
     * @allow (get, list) Any user can read league customization data.
     * @allow (create, update, delete) Only admins can manage league customization data.
     * @deny (create, update, delete) Non-admin users cannot manage league customization data.
     * @principle Admin-controlled writes.
     */
    match /leagueCustomizations/{leagueId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for team customizations.
     * @path /teamCustomizations/{teamId}
     * @allow (get, list) Any user can read team customization data.
     * @allow (create, update, delete) Only admins can manage team customization data.
     * @deny (create, update, delete) Non-admin users cannot manage team customization data.
     * @principle Admin-controlled writes.
     */
    match /teamCustomizations/{teamId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for player customizations.
     * @path /playerCustomizations/{playerId}
     * @allow (get, list) Any user can read player customization data.
     * @allow (create, update, delete) Only admins can manage player customization data.
     * @deny (create, update, delete) Non-admin users cannot manage player customization data.
     * @principle Admin-controlled writes.
     */
    match /playerCustomizations/{playerId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for match customizations.
     * @path /matchCustomizations/{fixtureId}
     * @allow (get, list) Any user can read match customization data.
     * @allow (create, update, delete) Only admins can manage match customization data.
     * @deny (create, update, delete) Non-admin users cannot manage match customization data.
     * @principle Admin-controlled writes.
     */
    match /matchCustomizations/{fixtureId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for continent customizations.
     * @path /continentCustomizations/{continentId}
     * @allow (get, list) Any user can read continent customization data.
     * @allow (create, update, delete) Only admins can manage continent customization data.
     * @deny (create, update, delete) Non-admin users cannot manage continent customization data.
     * @principle Admin-controlled writes.
     */
    match /continentCustomizations/{continentId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for country customizations.
     * @path /countryCustomizations/{countryId}
     * @allow (get, list) Any user can read country customization data.
     * @allow (create, update, delete) Only admins can manage country customization data.
     * @deny (create, update, delete) Non-admin users cannot manage country customization data.
     * @principle Admin-controlled writes.
     */
    match /countryCustomizations/{countryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for pinned Iraqi matches.
     * @path /pinnedIraqiMatches/{matchId}
     * @allow (get, list) Any user can read pinned Iraqi match data.
     * @allow (create, update, delete) Only admins can manage pinned Iraqi match data.
     * @deny (create, update, delete) Non-admin users cannot manage pinned Iraqi match data.
     */
    match /pinnedIraqiMatches/{matchId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
   /**
     * @description Rules for Iraqi League Top Scorers.
     * @path /iraqiLeagueTopScorers
     * @allow (get, list) Any user can read Iraqi League Top Scorers data.
     * @deny (create, update, delete) No one can create, update, or delete Iraqi League Top Scorers data.
     * @principle Public read access with no write access.
     */
    match /iraqiLeagueTopScorers {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for admin-pinned prediction matches.
     * @path /predictions/{fixtureId}
     * @allow (get, list) Any signed-in user can read and list prediction matches.
     * @allow (create, update, delete) Only admins can manage prediction matches.
     * @principle Public read with admin-controlled writes.
     */
    match /predictions/{fixtureId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for individual user predictions.
     * @path /predictions/{fixtureId}/userPredictions/{userId}
     * @allow (create, get, update, delete) A user can manage their own prediction.
     * @principle User ownership.
     */
    match /predictions/{fixtureId}/userPredictions/{userId} {
      allow read, write: if isOwner(userId);
    }

    /**
     * @description Rules for the leaderboard.
     * @path /leaderboard/{userId}
     * @allow (get, list) Anyone can read the leaderboard.
     * @allow (create, update, delete) Only admins can write to the leaderboard (scores are calculated server-side).
     * @principle Public read access, admin-only writes.
     */
    match /leaderboard/{userId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }
  }
}



{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the application.",
      "properties": {
        "id": { "type": "string", "description": "Unique identifier for the user." },
        "email": { "type": "string", "description": "The user's email address.", "format": "email" },
        "username": { "type": "string", "description": "The username of the user." }
      },
      "required": ["id", "email", "username"]
    },
    "Competition": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Competition",
      "type": "object",
      "description": "Represents a football competition (e.g., league, cup).",
      "properties": {
        "id": { "type": "string", "description": "Unique identifier for the competition." },
        "name": { "type": "string", "description": "The name of the competition." },
        "continent": { "type": "string", "description": "The continent the competition belongs to." },
        "apiFootballId": { "type": "number", "description": "The ID of the competition in the API Football API." }
      },
      "required": ["id", "name", "continent", "apiFootballId"]
    },
    "Team": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Team",
      "type": "object",
      "description": "Represents a football team.",
      "properties": {
        "id": { "type": "string", "description": "Unique identifier for the team." },
        "name": { "type": "string", "description": "The name of the team." },
        "originalId": { "type": "number", "description": "The original ID of the team in the API Football API." }
      },
      "required": ["id", "name", "originalId"]
    },
    "Match": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Match",
      "type": "object",
      "description": "Represents a football match between two teams.",
      "properties": {
        "id": { "type": "string", "description": "Unique identifier for the match." },
        "competitionId": { "type": "string", "description": "Reference to Competition." },
        "homeTeamId": { "type": "string", "description": "Reference to Team (Home Team)." },
        "awayTeamId": { "type": "string", "description": "Reference to Team (Away Team)." },
        "date": { "type": "string", "description": "The date and time of the match.", "format": "date-time" },
        "status": { "type": "string", "description": "The status of the match." },
        "score": { "type": "string", "description": "The score of the match." }
      },
      "required": ["id", "competitionId", "homeTeamId", "awayTeamId", "date", "status", "score"]
    },
    "News": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "News",
      "type": "object",
      "description": "Represents a news article.",
      "properties": {
        "id": { "type": "string", "description": "Unique identifier for the news article." },
        "title": { "type": "string", "description": "The title of the news article." },
        "body": { "type": "string", "description": "The body of the news article." },
        "imageUrl": { "type": "string", "description": "The URL of the image associated with the news article.", "format": "uri" },
        "authorId": { "type": "string", "description": "Reference to Admin user who wrote the news." },
        "createdAt": { "type": "string", "description": "The date and time the news article was created.", "format": "date-time" }
      },
      "required": ["id", "title", "body", "imageUrl", "authorId", "createdAt"]
    },
    "Admin": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Admin",
      "type": "object",
      "description": "Represents an administrator user with special privileges.",
      "properties": {
        "id": { "type": "string", "description": "Unique identifier for the admin user." }
      },
      "required": ["id"]
    },
    "UserFavorites": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserFavorites",
      "type": "object",
      "description": "Stores user's favorite teams and competitions.",
      "properties": {
        "userId": { "type": "string", "description": "Reference to User." },
        "teamIds": { "type": "array", "items": { "type": "string" } },
        "competitionIds": { "type": "array", "items": { "type": "string" } }
      },
      "required": ["userId"]
    },
    "PredictionMatch": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PredictionMatch",
      "type": "object",
      "description": "Represents a match that is pinned by an admin for predictions.",
      "properties": {
        "fixtureData": { "$ref": "#/entities/Match" }
      },
      "required": ["fixtureData"]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous",
      "google.com"
    ]
  },
  "firestore": {
    "rules": "rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    /**\n     * @description Checks if the request is made by an authenticated user.\n     */\n    function isSignedIn() {\n      return request.auth != null;\n    }\n\n    /**\n     * @description Checks if the authenticated user's UID matches the provided userId.\n     */\n    function isOwner(userId) {\n      return isSignedIn() && request.auth.uid == userId;\n    }\n\n    /**\n     * @description Checks if the requesting user is an admin.\n     */\n    function isAdmin() {\n      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));\n    }\n    \n    // User profiles are private\n    match /users/{userId} {\n      allow get, update, delete: if isOwner(userId);\n      allow create: if isOwner(userId) && request.resource.data.id == userId;\n      allow list: if false;\n    }\n\n    // Publicly readable data, admin writable\n    match /competitions/{competitionId} {\n      allow get, list: if true;\n      allow write: if isAdmin();\n    }\n    match /teams/{teamId} {\n      allow get, list: if true;\n      allow write: if isAdmin();\n    }\n    match /news/{newsId} {\n      allow get, list: if true;\n      allow write: if isAdmin();\n    }\n    match /managedCompetitions/{competitionId} {\n        allow get, list: if true;\n        allow write: if isAdmin();\n    }\n\n    // Publicly readable, not writable by client\n    match /matches/{matchId} {\n      allow get, list: if true;\n      allow write: if false;\n    }\n\n    // Admin collection, only accessible by other admins\n    match /admins/{adminId} {\n      allow read, write: if isAdmin();\n    }\n\n    // User-specific private data\n    match /users/{userId}/favorites/data {\n      allow get, write: if isOwner(userId);\n      allow list: if false;\n    }\n\t\n    // Customization collections, publicly readable, admin writable\n    match /leagueCustomizations/{leagueId} {\n        allow get, list: if true;\n        allow write: if isAdmin();\n    }\n    match /teamCustomizations/{teamId} {\n        allow get, list: if true;\n        allow write: if isAdmin();\n    }\n    match /playerCustomizations/{playerId} {\n        allow get, list: if true;\n        allow write: if isAdmin();\n    }\n     match /coachCustomizations/{coachId} {\n        allow get, list: if true;\n        allow write: if isAdmin();\n    }\n    match /matchCustomizations/{fixtureId} {\n        allow get, list: if true;\n        allow write: if isAdmin();\n    }\n    match /continentCustomizations/{continentId} {\n        allow get, list: if true;\n        allow write: if isAdmin();\n    }\n    match /countryCustomizations/{countryId} {\n        allow get, list: if true;\n        allow write: if isAdmin();\n    }\n    \n    // Iraqi League special collections, publicly readable, admin writable\n    match /pinnedIraqiMatches/{matchId} {\n      allow get, list: if true;\n      allow write: if isAdmin();\n    }\n    match /iraqiLeagueTopScorers/{scorerId} {\n      allow get, list: if true;\n      allow write: if isAdmin();\n    }\n\n    // --- Predictions System ---\n    \n    // Pinned matches for predictions are public to everyone\n    match /predictions/{fixtureId} {\n      allow get, list: if true;\n      allow write: if isAdmin();\n    }\n\n    // User's own prediction is private to them\n    match /predictions/{fixtureId}/userPredictions/{userId} {\n      allow read, write: if isOwner(userId);\n    }\n\n    // Leaderboard is public, but only writable by admins (server-side function)\n    match /leaderboard/{userId} {\n      allow get, list: if true;\n      allow write: if isAdmin();\n    }\n  }\n}\n"
  }
}
